{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/pef/Documents/Dev/cowboy/agenda-app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/pef/Documents/Dev/cowboy/agenda-app/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport prisma from \"@/lib/prisma\"\nimport bcrypt from \"bcrypt\"\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Mot de passe\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email\n          }\n        })\n\n        if (!user || !user.password) {\n          return null\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password\n        )\n\n        if (!isPasswordValid) {\n          return null\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        }\n      }\n    })\n  ],\n  session: {\n    strategy: \"jwt\"\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n  callbacks: {\n    session: ({ session, token }) => {\n      return {\n        ...session,\n        user: {\n          ...session.user,\n          id: token.id,\n        },\n      }\n    },\n    jwt: ({ token, user }) => {\n      if (user) {\n        const u = user as unknown as any\n        return {\n          ...token,\n          id: u.id,\n        }\n      }\n      return token\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }\n\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,+GAAA,CAAA,UAAM;IAC7B,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAgB,MAAM;gBAAW;YACtD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE;YAC1B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,EAAE;gBACd;YACF;QACF;QACA,KAAK,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;YACnB,IAAI,MAAM;gBACR,MAAM,IAAI;gBACV,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,EAAE,EAAE;gBACV;YACF;YACA,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}